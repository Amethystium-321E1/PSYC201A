set.seed(123) # good practice to set a random seed, or else different runs get you different results
set.seed(3407) # good practice to set a random seed, or else different runs get you different results
library(tidyverse)
library(ggplot2) # plotting
library(ggthemes) # optional, but nice
library(conflicted)
tibble(condition = c(rep("milk first", n_half), rep("tea first", n_half)),
rating = c(round(rnorm(n_half, mean = 3.5 + delta, sd = sigma)),
round(rnorm(n_half, mean = 3.5, sd = sigma)))) |>
mutate(rating = if_else(rating > 10, 10, rating), # truncate if greater than max/min of rating scale
rating = if_else(rating < 1, 1, rating))
tibble(condition = c(rep("milk first", n_half), rep("tea first", n_half)),
rating = c(round(rnorm(n_half, mean = 3.5 + delta, sd = sigma)),
round(rnorm(n_half, mean = 3.5, sd = sigma)))) |>
mutate(rating = if_else(rating > 10, 10, rating), # truncate if greater than max/min of rating scale
rating = if_else(rating < 1, 1, rating))
make_tea_data <- function(n_total = 48, sigma = 1.25, delta = 1.5) {
n_half <- n_total / 2
tibble(condition = c(rep("milk first", n_half), rep("tea first", n_half)),
rating = c(round(rnorm(n_half, mean = 3.5 + delta, sd = sigma)),
round(rnorm(n_half, mean = 3.5, sd = sigma)))) |>
mutate(rating = if_else(rating > 10, 10, rating), # truncate if greater than max/min of rating scale
rating = if_else(rating < 1, 1, rating))
}
# here's, we're calling our custom function, and specifying different inputs than the defaults (which are inside the parenthese up above)
tea_data <- make_tea_data(n_total = 18, delta=1.5)
tea_data_highn <- make_tea_data(n_total = 48, delta=1.5)
by_condition <- tea_data %>%
group_by(condition) %>%
summarize(mean_rating = mean(rating), num_participants = length(rating))
by_condition_highn <- tea_data_highn %>%
group_by(condition) %>%
summarize(mean_rating = mean(rating), num_participants = length(rating))
out_low_n <- tea_data %>%
t.test(rating ~ condition, data = .,  var.equal = TRUE)
out_high_n <- tea_data_highn %>%
t.test(rating ~ condition, data = ., var.equal = TRUE)
samps <- tibble(sim = 1:1000) |> #
mutate(data = map(sim, \(i) make_tea_data(n_total = 18, delta=1.5))) |>  # simulate
unnest(cols = data) # wrangle
samps_highn <- tibble(sim = 1:1000) |> #
mutate(data = map(sim, \(i) make_tea_data(n_total = 48, delta=1.5))) |>  # simulate
unnest(cols = data) # wrangle
set.seed(3407) # good practice to set a random seed, or else different runs get you different results
library(tidyverse)
library(conflicted)
library(ggplot2) # plotting
library(ggthemes) # optional, but nice
make_tea_data <- function(n_total = 48, sigma = 1.25, delta = 1.5) {
n_half <- n_total / 2
tibble(condition = c(rep("milk first", n_half), rep("tea first", n_half)),
rating = c(round(rnorm(n_half, mean = 3.5 + delta, sd = sigma)),
round(rnorm(n_half, mean = 3.5, sd = sigma)))) |>
mutate(rating = if_else(rating > 10, 10, rating), # truncate if greater than max/min of rating scale
rating = if_else(rating < 1, 1, rating))
}
View(make_tea_data)
# here's, we're calling our custom function, and specifying different inputs than the defaults (which are inside the parenthese up above)
tea_data <- make_tea_data(n_total = 18, delta=1.5)
View(tea_data)
tea_data_highn <- make_tea_data(n_total = 48, delta=1.5)
View(tea_data_highn)
by_condition <- tea_data %>%
group_by(condition) %>%
summarize(mean_rating = mean(rating), num_participants = length(rating))
by_condition_highn <- tea_data_highn %>%
group_by(condition) %>%
summarize(mean_rating = mean(rating), num_participants = length(rating))
View(by_condition)
View(by_condition_highn)
out_low_n <- tea_data %>%
t.test(rating ~ condition, data = .,  var.equal = TRUE)
out_high_n <- tea_dat
out_low_n <- tea_data %>%
t.test(rating ~ condition, data = .,  var.equal = TRUE)
out_high_n <- tea_data_highn
out_low_n
out_high_n
out_low_n <- tea_data %>%
t.test(rating ~ condition, data = .,  var.equal = TRUE)
out_high_n <- tea_data_highn %>%
t.test(rating ~ condition, data = .,  var.equal = TRUE)
out_low_n
out_high_n
samps <- tibble(sim = 1:1000) |> #
mutate(data = map(sim, \(i) make_tea_data(n_total = 18, delta=1.5))) |>  # simulate
unnest(cols = data) # wrangle
samps_highn <- tibble(sim = 1:1000) |> #
mutate(data = map(sim, \(i) make_tea_data(n_total = 48, delta=1.5))) |>  # simulate
unnest(cols = data) # wrangle
tea_data_summary <- samps |>
group_by(sim, condition) |> # group by simulation #, and condition
summarise(mean_rating = mean(rating)) |> # summarize across ratings
group_by(sim) |> # now get difference
summarise(delta = mean_rating[condition == "milk first"] -
mean_rating[condition == "tea first"])
tea_data_highn_summary <- samps_highn |>
group_by(sim, condition) |> # group by simulation #, and condition
summarise(mean_rating = mean(rating)) |> # summarize across ratings
group_by(sim) |> # now get difference
summarise(delta = mean_rating[condition == "milk first"] -
mean_rating[condition == "tea first"])
ggplot(data=tea_data_summary, aes(x=delta)) +
geom_histogram(alpha=.8, bins=20)
# theme_few()
hist(tea_data_summary$delta)
hist(tea_data_highn_summary$delta)
hist(tea_data_summary$delta)
hist(tea_data_summary_redo$delta)
set.seed(42)
samps_redo <- tibble(sim = 1:1000) |> #
mutate(data = map(sim, \(i) make_tea_datan_total = 60, sigma = 2, delta = 1)) |>  # simulate
unnest(cols = data) # wrangle
set.seed(42)
samps_redo <- tibble(sim = 1:1000) |> #
mutate(data = map(sim, \(i) make_tea_data(n_total = 60, sigma = 2, delta = 1))) |>  # simulate
unnest(cols = data) # wrangle
tea_data_summary_redo <- samps_redo |>
group_by(sim, condition) |> # group by simulation #, and condition
summarise(mean_rating = mean(rating)) |> # summarize across ratings
group_by(sim) |> # now get difference
summarise(delta = mean_rating[condition == "milk first"] -
mean_rating[condition == "tea first"])
hist(tea_data_summary_redo$delta)
set.seed(42)
samps_redo <- tibble(sim = 1:1000) |> #
mutate(data = map(sim, \(i) make_tea_data(n_total = 48, sigma = 2, delta = 1))) |>  # simulate
unnest(cols = data) # wrangle
tea_data_summary_redo <- samps_redo |>
group_by(sim, condition) |> # group by simulation #, and condition
summarise(mean_rating = mean(rating)) |> # summarize across ratings
group_by(sim) |> # now get difference
summarise(delta = mean_rating[condition == "milk first"] -
mean_rating[condition == "tea first"])
hist(tea_data_summary_redo$delta)
null_model <- tibble(sim = 1:1000) |>
mutate(data = map(sim, \(i) make_tea_data(n_total = 18, delta = 0))) |>
unnest(cols = data)
null_model_summary <- null_model |>
group_by(sim, condition) |>
summarise(mean_rating = mean(rating)) |>
group_by(sim) |>
summarise(delta = mean_rating[condition == "milk first"] -
mean_rating[condition == "tea first"])
ggplot(data=null_model_summary, aes(x=delta)) +
geom_histogram(alpha=.8, bins=20) +
theme_few()
tea_data_highn_shuffled <- samps_highn %>%
group_by(sim) %>% # for each experiment
mutate(condition_shuffled = sample(condition)) # shuffle the condition labels
tea_data_highn_shuffled_summary <- tea_data_highn_shuffled %>%
group_by(condition_shuffled, sim) %>%
summarize(mean = mean(rating),
sd = sd(rating)) %>%
ungroup() %>%
summarize(delta = diff(mean)) # get the difference in ratings between conditions for each experimental draw
hist(tea_data_highn_shuffled_summary$delta) #what does this histogram look like?
ggplot(data = tea_data_highn_shuffled %>% filter(sim==3),  # can change the actual simulation number here
mapping = aes(x = condition_shuffled, y = rating))+
geom_point(mapping = aes(color = condition), # color
alpha=.8,
position = position_jitter(height = .1,
width = 0.1)) +
stat_summary(fun.data = mean_cl_boot, # this boostraps the confidence interval
geom = "linerange",
size = 1) +
stat_summary(fun = "mean", # this calculates the average
geom = "point",
shape = 21,
color = "black",
fill = "white") +
scale_y_continuous(breaks = 0:10,
labels = 0:10,
limits = c(0, 10))
library(tidyverse)
library(ggplot2) # plotting
library(ggthemes) # optional, but nice
ggplot(data = tea_data_highn_shuffled %>% filter(sim==3),  # can change the actual simulation number here
mapping = aes(x = condition_shuffled, y = rating))+
geom_point(mapping = aes(color = condition), # color
alpha=.8,
position = position_jitter(height = .1,
width = 0.1)) +
stat_summary(fun.data = mean_cl_boot, # this boostraps the confidence interval
geom = "linerange",
size = 1) +
stat_summary(fun = "mean", # this calculates the average
geom = "point",
shape = 21,
color = "black",
fill = "white") +
scale_y_continuous(breaks = 0:10,
labels = 0:10,
limits = c(0, 10))
set.seed(3407) # good practice to set a random seed, or else different runs get you different results
library(tidyverse)
library(ggplot2) # plotting
library(ggthemes) # optional, but nice
make_tea_data <- function(n_total = 48, sigma = 1.25, delta = 1.5) {
n_half <- n_total / 2
tibble(condition = c(rep("milk first", n_half), rep("tea first", n_half)),
rating = c(round(rnorm(n_half, mean = 3.5 + delta, sd = sigma)),
round(rnorm(n_half, mean = 3.5, sd = sigma)))) |>
mutate(rating = if_else(rating > 10, 10, rating), # truncate if greater than max/min of rating scale
rating = if_else(rating < 1, 1, rating))
}
# here's, we're calling our custom function, and specifying different inputs than the defaults (which are inside the parenthese up above)
tea_data <- make_tea_data(n_total = 18, delta=1.5)
tea_data_highn <- make_tea_data(n_total = 48, delta=1.5)
by_condition <- tea_data %>%
group_by(condition) %>%
summarize(mean_rating = mean(rating), num_participants = length(rating))
by_condition_highn <- tea_data_highn %>%
group_by(condition) %>%
summarize(mean_rating = mean(rating), num_participants = length(rating))
out_low_n <- tea_data %>%
t.test(rating ~ condition, data = .,  var.equal = TRUE)
out_high_n <- tea_data_highn %>%
t.test(rating ~ condition, data = .,  var.equal = TRUE)
out_low_n
out_high_n
samps <- tibble(sim = 1:1000) |> #
mutate(data = map(sim, \(i) make_tea_data(n_total = 18, delta=1.5))) |>  # simulate
unnest(cols = data) # wrangle
samps_highn <- tibble(sim = 1:1000) |> #
mutate(data = map(sim, \(i) make_tea_data(n_total = 48, delta=1.5))) |>  # simulate
unnest(cols = data) # wrangle
tea_data_summary <- samps |>
group_by(sim, condition) |> # group by simulation #, and condition
summarise(mean_rating = mean(rating)) |> # summarize across ratings
group_by(sim) |> # now get difference
summarise(delta = mean_rating[condition == "milk first"] -
mean_rating[condition == "tea first"])
tea_data_highn_summary <- samps_highn |>
group_by(sim, condition) |> # group by simulation #, and condition
summarise(mean_rating = mean(rating)) |> # summarize across ratings
group_by(sim) |> # now get difference
summarise(delta = mean_rating[condition == "milk first"] -
mean_rating[condition == "tea first"])
ggplot(data=tea_data_summary, aes(x=delta)) +
geom_histogram(alpha=.8, bins=20)
# theme_few()
hist(tea_data_summary$delta)
hist(tea_data_highn_summary$delta)
set.seed(42)
samps_redo <- tibble(sim = 1:1000) |> #
mutate(data = map(sim, \(i) make_tea_data(n_total = 48, sigma = 2, delta = 1))) |>  # simulate
unnest(cols = data) # wrangle
tea_data_summary_redo <- samps_redo |>
group_by(sim, condition) |> # group by simulation #, and condition
summarise(mean_rating = mean(rating)) |> # summarize across ratings
group_by(sim) |> # now get difference
summarise(delta = mean_rating[condition == "milk first"] -
mean_rating[condition == "tea first"])
hist(tea_data_summary_redo$delta)
null_model <- tibble(sim = 1:1000) |>
mutate(data = map(sim, \(i) make_tea_data(n_total = 18, delta = 0))) |>
unnest(cols = data)
null_model_summary <- null_model |>
group_by(sim, condition) |>
summarise(mean_rating = mean(rating)) |>
group_by(sim) |>
summarise(delta = mean_rating[condition == "milk first"] -
mean_rating[condition == "tea first"])
ggplot(data=null_model_summary, aes(x=delta)) +
geom_histogram(alpha=.8, bins=20) +
theme_few()
tea_data_highn_shuffled <- samps_highn %>%
group_by(sim) %>% # for each experiment
mutate(condition_shuffled = sample(condition)) # shuffle the condition labels
tea_data_highn_shuffled_summary <- tea_data_highn_shuffled %>%
group_by(condition_shuffled, sim) %>%
summarize(mean = mean(rating),
sd = sd(rating)) %>%
ungroup() %>%
summarize(delta = diff(mean)) # get the difference in ratings between conditions for each experimental draw
hist(tea_data_highn_shuffled_summary$delta) #what does this histogram look like?
ggplot(data = tea_data_highn_shuffled %>% filter(sim==3),  # can change the actual simulation number here
mapping = aes(x = condition_shuffled, y = rating))+
geom_point(mapping = aes(color = condition), # color
alpha=.8,
position = position_jitter(height = .1,
width = 0.1)) +
stat_summary(fun.data = mean_cl_boot, # this boostraps the confidence interval
geom = "linerange",
size = 1) +
stat_summary(fun = "mean", # this calculates the average
geom = "point",
shape = 21,
color = "black",
fill = "white") +
scale_y_continuous(breaks = 0:10,
labels = 0:10,
limits = c(0, 10))
difference_actual = tea_data_highn %>%  # in ONE experiment
group_by(condition) %>%
summarize(mean = mean(rating)) %>%
pull(mean) %>%
diff()
#plot the distribution of the differences
ggplot(data = tea_data_highn_shuffled_summary, aes(x=delta)) +
geom_histogram(aes(y = stat(density)),
color = "black",
fill = "lightblue",
binwidth = 0.05) +
stat_density(geom = "line",
size = 1.5,
bw = 0.2) +
geom_vline(xintercept = difference_actual, color = "red", size = 2) +
labs(x = "difference between means")
tea_data_highn_shuffled_summary %>%
summarize(p_value = sum(delta <= difference_actual)/n())
ggplot(data=tea_data_highn_shuffled_summary, aes(x=delta)) +
geom_histogram(alpha=.4, bins=20, color='blue', fill='blue') +
geom_histogram(alpha=.8, bins=20, data=tea_data_highn_summary)
tea_dataset = tea_data
# tea_dataset = tea_data_highn
tea_ratings <- filter(tea_dataset, condition == "tea first")$rating
milk_ratings <- filter(tea_dataset, condition == "milk first")$rating
# could also do in a pipe like so, but then you have to grab the column below, as in tea_ratings$ratings; above is a vector
# tea_ratings <- tea_data_highn %>%
#   filter(condition=="tea first") %>%
#   select(rating)
n_tea <- length(tea_ratings)
n_milk <- length(milk_ratings)
sd_tea <- sd(tea_ratings)
sd_milk <- sd(milk_ratings)
tea_sd_pooled <- sqrt(((n_tea - 1) * sd_tea ^ 2 + (n_milk - 1) * sd_milk ^ 2) /
(n_tea + n_milk - 2))
tea_se <- tea_sd_pooled * sqrt((1 / n_tea) + (1 / n_milk))
delta_hat <- mean(milk_ratings) - mean(tea_ratings)
tea_ci_lower <- delta_hat - tea_se * qnorm(0.975)
tea_ci_upper <- delta_hat + tea_se * qnorm(0.975)
num_observations = length(tea_dataset$rating)
df = num_observations-2 # for two sample t.test
tea_ci_lower_ttest <- delta_hat - tea_se * qt(0.975,df)
tea_ci_upper_ttest <- delta_hat + tea_se * qt(0.975,df)
# Now the calculated CIs match those in the t-test outputs!
t.test(tea_ratings, milk_ratings, var.equal=TRUE)
confidence_level=.95 # you can change this
# this formula below gives the critical t-value (as opposed to simply taken from the normal distribution)
# qt(1 - (1 - confidence_level)/2, df = n - 1)
tea_data_highn_summary_cis <- tea_data_highn %>%
group_by(condition) %>%
summarize(cond_mean = mean(rating), cond_sd = sd(rating), n=length(rating)) %>%
mutate(error = qt(1 - (1 - confidence_level)/2, df = n - 1)* (cond_sd/sqrt(n))) %>% # this calculates CIs WITHIN each condition
mutate(ci_upper = cond_mean + error, ci_lower = cond_mean - error) %>%
mutate(se_upper = cond_mean + cond_sd/sqrt(n), se_lower = cond_mean - cond_sd/sqrt(n))
ggplot(data = tea_data_highn, aes(x=condition, y=rating, col=condition))  +
geom_jitter(width=.1, height=0, alpha=.3) + # visualizes all the raw data, with no variation in y-axis jitter
theme_few() +
geom_pointrange(data = tea_data_highn_summary_cis, aes(x=condition, y = cond_mean, ymin = ci_lower, ymax = ci_upper)) +
ylim(0,10) +
ggtitle('Tea ratings across conditions with CIs')
ggplot(data = tea_data_highn, aes(x=condition, y=rating, col=condition))  +
geom_jitter(width=.1, height=0, alpha=.5) + # visualizes all the raw data, with no variation in y-axis jitter
theme_few() +
geom_pointrange(data = tea_data_highn_summary_cis, aes(x=condition, y = cond_mean, ymin = se_lower, ymax = se_upper)) +
ylim(0,10) +
ggtitle('Tea ratings across condition with SE')
all_results=tibble()
for (this_sim in 1:1000) {
this_experiment = null_model %>%
filter(sim==this_sim)
tea_ratings <- filter(this_experiment, condition == "tea first")$rating
milk_ratings <- filter(this_experiment, condition == "milk first")$rating
output = t.test(tea_ratings, milk_ratings)
this_exp_output = tibble(pvalue = output$p.value)
all_results = bind_rows(all_results, this_exp_output)
}
hist(all_results$pvalue)
all_results_high_n=tibble()
for (this_sim in 1:500) {
this_experiment = samps_highn %>%
filter(sim==this_sim)
tea_ratings <- filter(this_experiment, condition == "tea first")$rating
milk_ratings <- filter(this_experiment, condition == "milk first")$rating
output = t.test(tea_ratings, milk_ratings, paired = FALSE, var.equal = TRUE)
this_exp_output = tibble(pvalue = output$p.value)
all_results_high_n = bind_rows(all_results_high_n, this_exp_output)
}
ggplot(data = tea_data, aes(x=condition, y=rating, col=condition))  +
geom_jitter(width=.1, height=0, alpha=.3) + # visualizes all the raw data, with no variation in y-axis jitter
theme_few() +
geom_pointrange(data = tea_data_highn_summary_cis, aes(x=condition, y = cond_mean, ymin = ci_lower, ymax = ci_upper)) +
ylim(0,10) +
ggtitle('Tea ratings across conditions with CIs')
ggplot(data = tea_data_highn, aes(x=condition, y=rating, col=condition))  +
geom_jitter(width=.1, height=0, alpha=.3) + # visualizes all the raw data, with no variation in y-axis jitter
theme_few() +
geom_pointrange(data = tea_data_highn_summary_cis, aes(x=condition, y = cond_mean, ymin = ci_lower, ymax = ci_upper)) +
ylim(0,10) +
ggtitle('Tea ratings across conditions with CIs')
confidence_level=.95 # you can change this
# this formula below gives the critical t-value (as opposed to simply taken from the normal distribution)
# qt(1 - (1 - confidence_level)/2, df = n - 1)
tea_data_highn_summary_cis <- tea_data_highn %>%
group_by(condition) %>%
summarize(cond_mean = mean(rating), cond_sd = sd(rating), n=length(rating)) %>%
mutate(error = qt(1 - (1 - confidence_level)/2, df = n - 1)* (cond_sd/sqrt(n))) %>% # this calculates CIs WITHIN each condition
mutate(ci_upper = cond_mean + error, ci_lower = cond_mean - error) %>%
mutate(se_upper = cond_mean + cond_sd/sqrt(n), se_lower = cond_mean - cond_sd/sqrt(n))
all_results=tibble()
for (this_sim in 1:1000) {
this_experiment = null_model %>%
filter(sim==this_sim)
tea_ratings <- filter(this_experiment, condition == "tea first")$rating
milk_ratings <- filter(this_experiment, condition == "milk first")$rating
output = t.test(tea_ratings, milk_ratings)
this_exp_output = tibble(pvalue = output$p.value)
all_results = bind_rows(all_results, this_exp_output)
}
hist(all_results$pvalue)
all_results_high_n=tibble()
for (this_sim in 1:500) {
this_experiment = samps_highn %>%
filter(sim==this_sim)
tea_ratings <- filter(this_experiment, condition == "tea first")$rating
milk_ratings <- filter(this_experiment, condition == "milk first")$rating
output = t.test(tea_ratings, milk_ratings, paired = FALSE, var.equal = TRUE)
this_exp_output = tibble(pvalue = output$p.value)
all_results_high_n = bind_rows(all_results_high_n, this_exp_output)
}
set.seed(42)
samps_redo <- tibble(sim = 1:1000) |> #
mutate(data = map(sim, \(i) make_tea_data(n_total = 48, sigma = 1.5, delta = 1))) |>  # simulate
unnest(cols = data) # wrangle
tea_data_summary_redo <- samps_redo |>
group_by(sim, condition) |> # group by simulation #, and condition
summarise(mean_rating = mean(rating)) |> # summarize across ratings
group_by(sim) |> # now get difference
summarise(delta = mean_rating[condition == "milk first"] -
mean_rating[condition == "tea first"])
hist(tea_data_summary_redo$delta)
set.seed(42)
samps_redo <- tibble(sim = 1:1000) |> #
mutate(data = map(sim, \(i) make_tea_data(n_total = 48, delta = 1))) |>  # simulate
unnest(cols = data) # wrangle
tea_data_summary_redo <- samps_redo |>
group_by(sim, condition) |> # group by simulation #, and condition
summarise(mean_rating = mean(rating)) |> # summarize across ratings
group_by(sim) |> # now get difference
summarise(delta = mean_rating[condition == "milk first"] -
mean_rating[condition == "tea first"])
hist(tea_data_summary_redo$delta)
